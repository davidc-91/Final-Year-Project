# -*- coding: utf-8 -*-
"""Arima_New.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZhmjqYp6J3q7YG6GMCq5tzgKX1Lwv0ir
"""

!pip install statsmodels --upgrade

from pandas import read_csv
from pandas import datetime
from matplotlib import pyplot

series = read_csv('PP Test.csv', header=0, index_col=0, squeeze=True)
print(series.head())
series.plot()
pyplot.show()

from pandas import read_csv
from matplotlib import pyplot 
from pandas.plotting import autocorrelation_plot
series = read_csv('PP Test.csv', header=0, index_col=0)
series.iloc[0] = 0 
ax = autocorrelation_plot(series)
ax.set_xlim([0, 30])
pyplot.show()

# fit an ARIMA model and plot residual errors
from pandas import datetime
from pandas import read_csv
from pandas import DataFrame
from statsmodels.tsa.arima.model import ARIMA
from matplotlib import pyplot
# load dataset
series = read_csv('PP Test.csv', header=0, index_col=0, squeeze=True)

# fit model
model = ARIMA(series, order=(5,1,0))
model_fit = model.fit()
# summary of fit model
print(model_fit.summary())
# line plot of residuals
residuals = DataFrame(model_fit.resid)
residuals.plot(rot=45)
pyplot.title('Line Plot of Residuals')
pyplot.xlabel('Date')
pyplot.ylabel('PCT')
pyplot.show()
# density plot of residuals
residuals.plot(kind='kde')
pyplot.title('Density Plot of Residuals')
pyplot.ylabel('Density')
pyplot.show()
# summary stats of residuals
print(residuals.describe())

# evaluate an ARIMA model using a walk-forward validation
from pandas import read_csv
from pandas import datetime
from matplotlib import pyplot
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt
# load dataset
series = read_csv('PP Test.csv', header=0, index_col=0, squeeze=True)
# split into train and test sets
X = series.values
size = int(len(X) * 0.66)
train, test = X[0:size], X[size:len(X)]
history = [x for x in train]
predictions = list()
# walk-forward validation
for t in range(len(test)):
	model = ARIMA(history, order=(5,1,0))
	model_fit = model.fit()
	output = model_fit.forecast()
	yhat = output[0]
	predictions.append(yhat)
	obs = test[t]
	history.append(obs)
	print('predicted=%f, expected=%f' % (yhat, obs))
# evaluate forecasts
rmse = sqrt(mean_squared_error(test, predictions))
print('Test RMSE: %.3f' % rmse)
# plot forecasts against actual outcomes
pyplot.plot(test)
pyplot.plot(predictions, color='red')
pyplot.title('Rolling Forecast ARIMA Model')
pyplot.xlabel('Days')
pyplot.ylabel('PCT')
pyplot.show()